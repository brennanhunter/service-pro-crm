generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Business/Tenant table - each row represents a separate business
model Business {
  id           String   @id @default(cuid())
  name         String
  subdomain    String   @unique
  logoUrl      String?  @map("logo_url")
  brandColors  Json?    @map("brand_colors")
  plan         String   @default("starter")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships - all data belongs to a business
  users        User[]
  customers    Customer[]
  services     Service[]
  invoices     Invoice[]

  @@map("businesses")
}

// Users table - includes business owners, technicians, and customers
model User {
  id         String   @id @default(cuid())
  businessId String   @map("business_id")
  email      String
  name       String
  role       UserRole @default(CUSTOMER)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relationships
  business        Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  assignedServices Service[]     @relation("TechnicianServices")
  serviceUpdates  ServiceUpdate[]
  createdInvoices Invoice[]

  // Composite unique constraint to allow same email across different businesses
  @@unique([businessId, email])
  @@map("users")
}

// Customer table - separate from users for better data organization
model Customer {
  id         String   @id @default(cuid())
  businessId String   @map("business_id")
  name       String
  email      String
  phone      String?
  address    String?
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relationships
  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  services Service[]
  invoices Invoice[]

  @@unique([businessId, email])
  @@map("customers")
}

// Service tickets/jobs
model Service {
  id           String        @id @default(cuid())
  businessId   String        @map("business_id")
  customerId   String        @map("customer_id")
  technicianId String?       @map("technician_id")
  title        String
  description  String
  status       ServiceStatus @default(PENDING)
  priority     Priority      @default(MEDIUM)
  estimatedCost Float?       @map("estimated_cost")
  actualCost   Float?        @map("actual_cost")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relationships
  business   Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer   Customer        @relation(fields: [customerId], references: [id])
  technician User?           @relation("TechnicianServices", fields: [technicianId], references: [id])
  updates    ServiceUpdate[]
  invoices   Invoice[]

  @@map("services")
}

// Service updates/notes
model ServiceUpdate {
  id        String   @id @default(cuid())
  serviceId String   @map("service_id")
  userId    String   @map("user_id")
  message   String
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("service_updates")
}

// Invoices
model Invoice {
  id         String        @id @default(cuid())
  businessId String        @map("business_id")
  customerId String        @map("customer_id")
  serviceId  String?       @map("service_id")
  createdById String?      @map("created_by_id")
  amount     Float
  status     InvoiceStatus @default(PENDING)
  dueDate    DateTime      @map("due_date")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  // Relationships
  business  Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer  Customer  @relation(fields: [customerId], references: [id])
  service   Service?  @relation(fields: [serviceId], references: [id])
  createdBy User?     @relation(fields: [createdById], references: [id])

  @@map("invoices")
}

// Enums
enum UserRole {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}